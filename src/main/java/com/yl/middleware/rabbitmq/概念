生产者将消息发送到指定虚拟地址的Exchange下,Exchange根据路由键将消息推送到指定的队列下(一条或多条)
消费者订阅指定虚拟地址下的队列,从中获取消息
交换机(Exchange)
    1. Direct Exchange 发送到交换机的消息被转发到RouteKey中指定的Queue

    2. Topic Exchange 发送到交换机的消息被转发到所有关心RounteKey中指定的topic的queue中
       模糊匹配: #匹配一个或多个词 *匹配一个词
       栗子:exchangeA与queueA通过路由键rout#绑定,则生产者通过路由键routA、routABC...发送到交换机exchangeA的消息都会被发到queueA上

    3. Fanout Exchange 不处理路由键,路由键的作用只是将队列绑定到交换机上;所有发送到该交换机的消息会被转发到与该交换机绑定的所有队列上
       性能最高,因为不处理路由键。

    4. Headers Exchange 根据消息头进行路由,不常用



可靠性投递的解决方案

    <一> 消息入库
        步骤:
        1.消息推送之前入库,状态0,并设置超时时间与重试次数(方便后续进行重新投递)
        2.入库之后进行消息投递
        3.投递成功修改状态为投递成功
        4.使用定时任务轮训未收到Broker的消息,且达到超时时间并且未超过重试次数的消息进行重新投递

        优点:1.实现简单,保障性高
        缺点:1.所有消息入库, 不适合高并发场景

    <二> 延迟投递,回调检查
        步骤:
        1.业务消息入库,发送异步消息到Broker
        2.固定时间之后(根据具体业务来决定)发送检查消息到Broker
        3.消费者消费消息之后发送确认消息到Broker
        4.回调服务器监听消费者确认消息队列与生产者检查消息队列
        5.回调服务器在收到消费者确认消息之后会将消息存储到消息数据库
        6.回调服务器在收到生产者检查消息之后会到消息数据库中检查消息
        7.如果消息数据库中无这条消息或状态是失败的,就会通过网络调用(如RPC)生产者重新进行消息投递
        8.如果消息成功,则不用重新发送

        优点:
        1.将业务数据库与消息数据库解耦,增加了业务服务器的性能,能支持更高的并发
        缺点
        1.实现稍微复杂


关于监听器
    <一> ConfirmListener
        作用:1.用于监听消息是否成功发送到exchange
        错误原因:1.网络失败
        注意:1.channel.confirmSelect();

    <二> ReturnListener
        作用:1.用于监听消息是否成功发送到queue
        错误原因:1.消息不可达,即消息找不到对应的queue
        注意:1.发送消息时channel.basicPublish(exchangeName, routingKey,true, properties, line.getBytes());
               mandatory参数必须为true(默认为false),若为false,则Broker会直接删除不可达消息,不会进行回调处理

关于消费端限流
     1.channel.basicQos(0,1,false);
        参数1-限流消息大小(0表示不限大小) 参数2-限流消息条数(即每次从队列消费N条消息) 参数3-是否应用到channel级别(false表示应用到consumer)
     2.channel.basicConsume(queueName,false,new RateLimitConsumer(channel));
        限流必须设置autoAck = false进行手动确认消息this.getChannel().basicAck(envelope.getDeliveryTag(), false);

关于死信队列
    概念:当一个消息在队列中没被消费,会被publish到一个exchange上,这个exchange就是死信队列DLX(dead-letter-exchange)
    什么情况下消息会被发到私信队列:
        1.消息被拒绝basicReject/basicNack,且不重回队列requeue = false
        2.消息ttl过期。队列设置过期时间(通过arguments设置,arguments.put("x-message-ttl",10000))、消息设置过期(通过properties设置)
        3.队列设置最大长度,达到最大长度时,新发送的消息会被发送到死信队列(arguments.put("x-max-length",1000))
    如何设置死信队列:
        1.定义一个正常的exchange(name = 'dlx_exchange')和queue并设置绑定关系(推荐使用'#'作为路由键),作为其他队列的DLX
        2.定义一个正常的queue,并通过arguments设置其死信队列arguments.put("x-dead-letter-exchange","dlx_exchange");
    使用:
        1.当使用Direct Exchange作为DLX时,队列必须设置死信路由key属性
            arguments.put("x-dead-letter-exchange", deadLetterExchange().getName());
            arguments.put("x-dead-letter-routing-key", "deadKey");
        2.当使用Topic Exchange作为DLX时
            1.死信队列的路由key设为"#",队列可不设置x-dead-letter-routing-key属性
            2.死信队列的路由key设为"dlx.#"时, 必须设置arguments.put("x-dead-letter-routing-key", "dlx.123..")进行匹配;
        3.当使用Fanout Exchange时,不需设置x-dead-letter-routing-key属性

#关于Spring Cloud Stream整合Rabbitmq部分的知识今后使用到再进行系统学习


关于RabbitMq集群
    <一>主备模式
        概念:主节点提供读写,备节点不提供读写,当主节点故障,备节点升级成主节点提供读写
        使用场景:并发量不高的情况下使用
        实现方式:
            1.使用HaProxy做主备切换
            2.主备节点使用共享存储
         HaProxy


    <二>远程模式(Shovel)
        概念:把消息进行不同数据中心的复制工作,将跨网络的两个mq集群互联


    <三>镜像模式(Mirror)*重要(主流集群架构方案)


    <四>多活模式
























